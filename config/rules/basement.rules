var Timer Exersize_Room_Occupancy_Timer = null
var Timer Total_Basement_Occupancy_Timer = null

rule "when movie mode is turned on"
when
  Item Basement_Movie_Mode_Switch received command ON
then
  Basement_Stairs_Switch.sendCommand(OFF)
  Basement_Room_Lights_Switch.sendCommand(OFF)
  Basement_Room_Theater_Lights.sendCommand(9)
  Basement_Room_Bar_Lights.sendCommand(10)

  createTimer(now.plusSeconds(10), [|
    Basement_Movie_Mode_Switch.postUpdate(OFF)
  ])
end

rule "when normal mode is turned on"
when
  Item Basement_Normal_Mode_Switch received command ON
then
  Basement_Stairs_Switch.sendCommand(ON)
  Basement_Room_Theater_Lights.sendCommand(100)
  Basement_Room_Bar_Lights.sendCommand(100)

  createTimer(now.plusSeconds(10), [|
    Basement_Normal_Mode_Switch.postUpdate(OFF)
  ])
end

rule "when someone enters/leaves downstairs"
when
  Item C_Total_Basement_Occupancy changed
then
  val previous_count = C_Total_Basement_Occupancy.previousState(true, "jdbc").state
  val occupancy_count = C_Total_Basement_Occupancy.state

  if (Total_Basement_Occupancy_Timer !== null) {
    Total_Basement_Occupancy_Timer.cancel()
  }

  if (occupancy_count > 0) {
    if (Basement_Stairs_Switch.state != ON && previous_count < occupancy_count) {
      Basement_Stairs_Switch.sendCommand(ON)
      Basement_TV_Toast.sendCommand("Someone has entered the basement")
    }
    if (Kitchen_Accent_Desk_LED_1_Color.state != 6) {
      Kitchen_Accent_Desk_LED_1_Color.sendCommand(6)
    }
    if (Kitchen_Accent_Sink_LED_1_Color.state != 6) {
      Kitchen_Accent_Sink_LED_1_Color.sendCommand(6)
    }
  } else {
    Total_Basement_Occupancy_Timer = createTimer(now.plusSeconds(120), [|
      C_All_Lights.members.forEach [ i |
        if (i.state != OFF) {
          i.sendCommand(OFF)
        }
      ]
    ])
    
    if (Kitchen_Accent_Desk_LED_1_Color.state != 0) {
      Kitchen_Accent_Desk_LED_1_Color.sendCommand(0)
    }
    if (Kitchen_Accent_Sink_LED_1_Color.state != 0) {
      Kitchen_Accent_Sink_LED_1_Color.sendCommand(0)
    }
  }
end

rule "When the count of the occupancy sensor changes"
when
  Item Hiome_Basement_Occupancy_Count received update
  or
  Item Hiome_Exercise_Room_Occupancy_Count received update
then
  // Have a small delay while the hiome updates finish
  createTimer(now.plusMillis(50), [|
    val new_total_occupancy = Hiome_Basement_Occupancy_Count.state as Number + Hiome_Exercise_Room_Occupancy_Count.state as Number
    C_Total_Basement_Occupancy.postUpdate(new_total_occupancy)
  ])
end

rule "when the exersize room dimmer has a scene change"
when
  Item Exercise_Room_Dimmer_Scene_Number received update
then
  var scene = Exercise_Room_Dimmer_Scene_Number.state as DecimalType

  switch(scene) {
    case 1.3: {
      if (Basement_Stairs_Switch.state != ON) {
        Basement_Stairs_Switch.sendCommand(ON)
      }
    }
    case 2.3: {
      if (Basement_Stairs_Switch.state != OFF) {
        Basement_Stairs_Switch.sendCommand(OFF)
      }
    }
  }
end

rule "when someone enters/leaves the exercise room"
when
  Item Hiome_Exercise_Room_Occupancy_Count changed
then
  val occupancy_count = Hiome_Exercise_Room_Occupancy_Count.state
  
  if (Exersize_Room_Occupancy_Timer !== null) {
    Exersize_Room_Occupancy_Timer.cancel()
  }
  
  if (occupancy_count > 0) {
    if (Exercise_Room_Light.state != ON) {
      Exercise_Room_Light.sendCommand(ON)
    }
  } else {
    Exersize_Room_Occupancy_Timer = createTimer(now.plusSeconds(90), [|
      if (Exercise_Room_Light.state != OFF) {
        Exercise_Room_Light.sendCommand(OFF)
      }
    ])
  }
end
