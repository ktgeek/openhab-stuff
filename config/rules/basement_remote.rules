rule "when the basement remote is used"
when
  Item NanomoteQuad_Scene received update
then
  val scene = NanomoteQuad_Scene.state as DecimalType

  switch(scene) {
    case 1.0: {
      Basement_Normal_Mode_Switch.sendCommand(ON)
    }
    case 2.0: {
      if (Basement_Stairs_Switch.state != ON) {
          Basement_Stairs_Switch.sendCommand(ON)
      } else {
          Basement_Stairs_Switch.sendCommand(OFF)
      }
    }
    case 3.0: {
      if (Basement_Room_Theater_Lights.state < 100) {
          Basement_Room_Theater_Lights.sendCommand(100)
          Basement_Room_Bar_Lights.sendCommand(100)
      } else {
          Basement_Room_Theater_Lights.sendCommand(OFF)
          Basement_Room_Bar_Lights.sendCommand(OFF)
      }
    }
    case 4.0: {
      Basement_Movie_Mode_Switch.sendCommand(ON)
    }
  }
end

rule "when the basement theater switches have a scene change"
when
  Member of C_Basement_Scene received update
then
  var scene = newState as DecimalType

  // logInfo("basement_remote.rules", "The scene change number rule has fired.")
  // This is how to map actions to scenes for a the homeseer switch
  // [Paddle Direction]
  // 1.n = Top
  // 2.n = Bottom

  // [Action]
  // n.0 = 1 Click
  // n.1 = Release
  // n.2 = Hold
  // n.3 = 2 Clicks
  // n.4 = 3 Clicks
  // n.5 = 4 Clicks
  // n.6 = 5 Clicks

  switch(scene) {
    case 1.3: {
      Basement_Normal_Mode_Switch.sendCommand(ON)
    }
    case 2.3: {
      Basement_Movie_Mode_Switch.sendCommand(ON)
    }
  }
end
