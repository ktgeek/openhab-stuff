import java.util.List

// The room ids for the exersize room and basement respectively
val List<String> basementHiomeRoomIds = newArrayList("1577046124", "1557680825")

rule "when the kitchen accent switches have a scene change"
when
  Member of FF_Kitchen_Accents_Scene received update
then
  var scene = newState as DecimalType
  // This is how to map actions to scenes for a the homeseer switch
  // [Paddle Direction]
  // 1.n = Top
  // 2.n = Bottom

  // [Action]
  // n.0 = 1 Click
  // n.1 = Release
  // n.2 = Hold
  // n.3 = 2 Clicks
  // n.4 = 3 Clicks
  // n.5 = 4 Clicks
  // n.6 = 5 Clicks

  switch(scene) {
//    case 1.0: {
//      FF_Kitchen_Accents.members.forEach [ i |
//        if (i.state != 100) {
//          i.sendCommand(100)
//        }
//      ]
//    }
//    case 2.0: {
//      FF_Kitchen_Accents.members.forEach [ i |
//        if (i.state != 0) {
//          i.sendCommand(0)
//        }
//      ]
//    }
    case 2.3: {
      if (C_Total_Basement_Occupancy.state > 0)
      {
        // Let's reset the basement count!
        basementHiomeRoomIds.forEach [ i |
          sendHttpPutRequest("http://hiome.kgarner.com/api/1/rooms/" + i, "application/json", "{\"occupancy_count\": 0}")
        ]

        // Force off all lights in the basement. This is copied code from the basement rules, so there is probably a way
        // to generisize this.  Maybe a proxy item and rules?
        C_All_Lights.members.forEach [ i |
          if (i.state != OFF) {
            i.sendCommand(OFF)
          }
        ]
      }
    }
  }
end

rule "When kitchen lights scene changes"
when
  Member of FF_Kitchen_Lights_Scene received update
then
  var scene = newState as DecimalType

  switch(scene) {
    case 1.2: {
      Normal_Kitchen_Lights.members.forEach [ i |
        if (i.state != ON) {
          i.sendCommand(ON)
        }
      ]
    }
    case 2.2: {
      Normal_Kitchen_Lights.members.forEach [ i |
        if (i.state != OFF) {
          i.sendCommand(OFF)
        }
      ]
    }
    case 1.3: {
      Normal_Kitchen_Lights.members.forEach [ i |
        if (i.state != ON) {
          i.sendCommand(ON)
        }
      ]
    }
    case 2.3: {
      Normal_Kitchen_Lights.members.forEach [ i |
        if (i.state != OFF) {
          i.sendCommand(OFF)
        }
      ]
    }
    case 1.4: {
      All_Kitchen_Lights.members.forEach [ i |
        if (i.state != ON) {
          i.sendCommand(ON)
        }
      ]
    }
    case 2.4: {
      All_Kitchen_Lights.members.forEach [ i |
        if (i.state != OFF) {
          i.sendCommand(OFF)
        }
      ]
    }
    case 2.5: {
      if (C_Total_Basement_Occupancy.state > 0)
      {
        // Let's reset the basement count!
        basementHiomeRoomIds.forEach [ i |
          sendHttpPutRequest("http://hiome.kgarner.com/api/1/rooms/" + i, "application/json", "{\"occupancy_count\": 0}")
        ]

        // Force off all lights in the basement. This is copied code from the basement rules, so there is probably a way
        // to generisize this.  Maybe a proxy item and rules?
        C_All_Lights.members.forEach [ i |
          if (i.state != OFF) {
            i.sendCommand(OFF)
          }
        ]
      }
    }

  }
end

// rule "When dimmer value changes on kitchen accents"
// when
//   Member of FF_Kitchen_Accents changed
// then
//   var state = triggeringItem.state

//   FF_Kitchen_Accents.members.forEach [ i |
//     if (i.state != state) {
//       i.sendCommand(state)
//     }
//   ]
// end

